{"version":3,"sources":["hooks/http.hook.js","components/heroesList/heroesSlice.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/filtersSlice.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","store/index.js","index.js"],"names":["useHttp","request","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","fetchHeroes","createAsyncThunk","heroesSlice","createSlice","name","initialState","heroes","heroesLoadingStatus","reducers","heroCreated","state","action","push","payload","deleteHero","filter","item","id","extraReducers","builder","addCase","pending","fulfilled","rejected","addDefaultCase","actions","reducer","heroesFetching","heroesFetched","heroesFetchingError","HeroesListItem","elementClassName","description","element","removeHero","className","src","alt","style","onClick","type","aria-label","Spinner","role","HeroesList","filteredHeroesSelector","createSelector","filters","activeFilter","filteredHeroes","useSelector","dispatch","useDispatch","useEffect","useCallback","then","console","log","catch","err","arr","elements","length","map","props","HeroesAddForm","useState","setName","setDescription","heroElement","setHeroElement","filtersLoadingStatus","onSubmit","e","preventDefault","newHero","uuidv4","JSON","stringify","htmlFor","required","value","onChange","target","placeholder","label","renderFilters","fetchFilters","filtersSlice","activeFilterChanged","filtersFetching","filtersFetched","filtersFetchingError","HeroesFilters","btnClass","classNames","App","stringMiddleware","next","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e81b927.chunk.js","sourcesContent":["\nexport const useHttp = () => {\n    // const [process, setProcess] = useState('waiting');\n\n    const request = async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        // setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            // setProcess('error');\n            throw e;\n        }\n    }\n\n    // const clearError = useCallback(() => {\n        // setProcess('loading');\n    // }, []);\n\n    return {request}\n}","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { useHttp } from \"../../hooks/http.hook\";\r\n\r\nconst initialState = {\r\n    heroes: [],\r\n    heroesLoadingStatus: 'idle',\r\n}\r\n\r\nexport const fetchHeroes = createAsyncThunk(\r\n    'heroes/fetchHeroes',\r\n    async () => {\r\n        const {request} = useHttp();\r\n        return await request(\"http://localhost:3001/heroes\")\r\n    }\r\n)\r\n\r\n\r\nconst heroesSlice = createSlice({\r\n    name: 'heroes',\r\n    initialState,\r\n    reducers: {\r\n        heroCreated: (state, action) => {\r\n                         state.heroes.push(action.payload)\r\n                        },\r\n        deleteHero: (state, action) => {\r\n                         state.heroes = state.heroes.filter(item => item.id !== action.payload)\r\n                        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchHeroes.pending, state => {state.heroesLoadingStatus = 'loading'})\r\n            .addCase(fetchHeroes.fulfilled, (state, action) => {\r\n                                            state.heroesLoadingStatus = 'idle';\r\n                                            state.heroes = action.payload;\r\n            })\r\n            .addCase(fetchHeroes.rejected, state => {state.heroesLoadingStatus = 'error'})\r\n            .addDefaultCase(() => {})\r\n    }   \r\n}) \r\n\r\nconst {actions, reducer} = heroesSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n    heroesFetching,\r\n    heroesFetched,\r\n    heroesFetchingError,\r\n    heroCreated,\r\n    deleteHero\r\n} = actions;","\nconst HeroesListItem = ({name, description, element, removeHero}) => {\n\n    let elementClassName;\n\n    switch (element) {\n        case 'fire':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'water':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'wind':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'earth':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    return (\n        <li \n            className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n            <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                 className=\"img-fluid w-25 d-inline\" \n                 alt=\"unknown hero\" \n                 style={{'objectFit': 'cover'}}/>\n            <div className=\"card-body\">               \n                <h3 className=\"card-title\">{name}</h3>\n                <p className=\"card-text\">{description}</p>\n            </div>\n            <span onClick={removeHero}\n                className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\" ></button>\n            </span>\n        </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport { deleteHero, fetchHeroes } from './heroesSlice';\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\n\n// Задача для этого компонента:\n// При клике на \"крестик\" идет удаление персонажа из общего состояния\n// Усложненная задача:\n// Удаление идет и с json файла при помощи метода DELETE\n\nconst HeroesList = () => {\n\n    const filteredHeroesSelector = createSelector(\n        (state) => state.filters.activeFilter,\n        (state) => state.heroes.heroes,\n        (filter, heroes) => {\n            if(filter === 'all') {\n                return heroes;\n            } else {\n                return heroes.filter(item => item.element === filter)\n            }  \n        }\n    )\n    const filteredHeroes = useSelector(filteredHeroesSelector)\n    const heroesLoadingStatus = useSelector(state => state.heroes.heroesLoadingStatus);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    useEffect(() => {\n        dispatch(fetchHeroes())\n        // eslint-disable-next-line\n    }, []);\n\n    const removeHero = useCallback((id) => {\n        // Удаление персонажа по его id\n        request(`http://localhost:3001/heroes/${id}`, \"DELETE\")\n            .then(data => console.log(data, 'Deleted'))\n            .then(dispatch(deleteHero(id)))\n            .catch(err => console.log(err));\n        // eslint-disable-next-line  \n    }, [request]);\n\n    if (heroesLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (heroesLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n        }\n\n        return arr.map(({id, ...props}) => {\n            return <HeroesListItem key={id} {...props} removeHero={() => removeHero(id)}/>\n        })\n    }\n\n    const elements = renderHeroesList(filteredHeroes);\n    return (\n        <ul>\n            {elements}\n        </ul>\n    )\n}\n\nexport default HeroesList;","import {useHttp} from '../../hooks/http.hook';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from \"react\";\nimport {v4 as uuidv4} from 'uuid';\n\nimport { heroCreated } from '../heroesList/heroesSlice';\n\n// Задача для этого компонента:\n// Реализовать создание нового героя с введенными данными. Он должен попадать\n// в общее состояние и отображаться в списке + фильтроваться\n// Уникальный идентификатор персонажа можно сгенерировать через uiid\n// Усложненная задача:\n// Персонаж создается и в файле json при помощи метода POST\n// Дополнительно:\n// Элементы <option></option> желательно сформировать на базе\n// данных из фильтров\n\nconst HeroesAddForm = () => {\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const [heroElement, setHeroElement] = useState('');\n\n    const {filters, filtersLoadingStatus} = useSelector(state => state.filters);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // const hero = {name, description}\n\n        const newHero = {\n            id: uuidv4(),\n            name: name,\n            description: description,\n            element: heroElement\n        }\n        \n        request('http://localhost:3001/heroes', 'POST', JSON.stringify(newHero))\n        .then(data => console.log(data, 'Submitted'))\n        .then(dispatch(heroCreated(newHero)))\n        .catch(err => console.log(err));\n\n        setName('');\n        setDescription('');\n        setHeroElement('');\n    }\n\n    const renderFilters = (filters, status) => {\n        if (status === \"loading\") {\n            return <option>Загрузка элементов</option>\n        } else if (status === \"error\") {\n            return <option>Ошибка загрузки</option>\n        }\n        \n        if (filters && filters.length > 0 ) {\n            return filters.map(({name, label}) => {\n                // eslint-disable-next-line\n                if (name === 'all')  return;\n\n                return <option key={name} value={name}>{label}</option>\n            })\n        }\n    }       \n    return (\n        <form className=\"border p-4 shadow-lg rounded\"\n        onSubmit={handleSubmit}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\n                <input \n                    required\n                    type=\"text\" \n                    name=\"name\" \n                    className=\"form-control\" \n                    id=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)} \n                    placeholder=\"Как меня зовут?\"/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\n                <textarea\n                    required\n                    name=\"text\" \n                    className=\"form-control\" \n                    id=\"text\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)} \n                    placeholder=\"Что я умею?\"\n                    style={{\"height\": '130px'}}/>\n            </div>\n            <div className=\"mb-3\">\n                <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\n                <select \n                    required\n                    className=\"form-select\" \n                    id=\"element\"\n                    value={heroElement}\n                    onChange={(e) => setHeroElement(e.target.value)} \n                    name=\"element\">\n                    <option> Я владею элементом...</option>\n                    {renderFilters(filters, filtersLoadingStatus)}\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\n        </form>\n    )\n}\n\nexport default HeroesAddForm;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\r\nimport { useHttp } from \"../../hooks/http.hook\"\r\n\r\nconst initialState = {\r\n    filters: [],\r\n    filtersLoadingStatus: 'idle',\r\n    activeFilter: 'all'\r\n}\r\n\r\nexport const fetchFilters = createAsyncThunk(\r\n    'filters/fetchFiltes',\r\n    async () => {\r\n        const {request} = useHttp();\r\n        return await request(\"http://localhost:3001/filters\")\r\n    }\r\n)\r\n\r\nconst filtersSlice = createSlice({\r\n    name: 'filters',\r\n    initialState,\r\n    reducers: {\r\n        // filtersFetching: state => {state.filtersLoadingStatus = 'loading'},\r\n        // filtersFetched: (state, action) => {\r\n        //                 state.filtersLoadingStatus = 'idle';\r\n        //                 state.filters = action.payload;\r\n        //                 },\r\n        // filtersFetchingError: state => {state.filtersLoadingStatus = 'error'},\r\n        activeFilterChanged: (state, action) => {state.activeFilter = action.payload}\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchFilters.pending, state => {state.filtersLoadingStatus = 'loading'})\r\n            .addCase(fetchFilters.fulfilled, (state, action) => {\r\n                                    state.filtersLoadingStatus = 'idle';\r\n                                    state.filters = action.payload;\r\n            })\r\n            .addCase(fetchFilters.rejected, state => {state.filtersLoadingStatus = 'error'})\r\n            .addDefaultCase(() => {})\r\n    }\r\n})\r\n\r\nconst  {actions, reducer} = filtersSlice;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n    filtersFetching,\r\n    filtersFetched,\r\n    filtersFetchingError,\r\n    activeFilterChanged\r\n} = actions;\r\n\r\n\r\n// const filters = (state = initialState, action) => {\r\n//     switch (action.type) {\r\n//         case 'FILTERS_FETCHING':\r\n//             return {\r\n//                     ...state,\r\n//                     filtersLoadingStatus: 'loading'\r\n//             }\r\n//         case 'FILTERS_FETCHED':\r\n//             return {\r\n//                     ...state,\r\n//                     filters: action.payload,\r\n//                     filtersLoadingStatus: 'idle'\r\n//             }\r\n//         case 'FILTERS_FETCHING_ERROR':\r\n//             return {\r\n//                     ...state,\r\n//                     filtersLoadingStatus: 'error'\r\n//             }\r\n//         case 'ACTIVE_FILTER_CHANGED':\r\n//             return {\r\n//                     ...state,\r\n//                     activeFilter: action.payload\r\n//             }\r\n//         default: return state\r\n//     }\r\n// }","// import {useHttp} from '../../hooks/http.hook';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { activeFilterChanged, fetchFilters} from './filtersSlice';\nimport Spinner from '../spinner/Spinner';\n\n\nconst HeroesFilters = () => {\n\n    const {filters, filtersLoadingStatus, activeFilter} = useSelector(state => state.filters);\n    const dispatch = useDispatch();\n    // const {request} = useHttp();\n\n    useEffect(() => {\n        dispatch(fetchFilters());\n        // eslint-disable-next-line\n    }, []);\n\n    if (filtersLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (filtersLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderFilters = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Фильтры не найдены</h5>\n        }\n\n        // Данные в json-файле я расширил классами и текстом\n        return arr.map(({name, className, label}) => {\n\n            // Используем библиотеку classnames и формируем классы динамически\n            const btnClass = classNames('btn', className, {\n                'active': name === activeFilter\n            });\n            \n            return <button \n                        key={name} \n                        id={name} \n                        className={btnClass}\n                        onClick={() => dispatch(activeFilterChanged(name))}\n                        >{label}</button>\n        })\n    }\n\n    const elements = renderFilters(filters);\n\n    return (\n        <div className=\"card shadow-lg mt-4\">\n            <div className=\"card-body\">\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n                <div className=\"btn-group\">\n                    {elements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport heroes from '../components/heroesList/heroesSlice';\nimport filters from '../components/heroesFilters/filtersSlice';\n\nconst stringMiddleware = () => (next) => (action) => {\n    if (typeof action === 'string') {\n        return next({\n            type: action\n        })\n    }\n    return next(action)\n}\n\nconst store = configureStore({\n    reducer: {heroes, filters},\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(stringMiddleware),\n    devTools: process.env.NODE_ENV !== 'production'\n})\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}